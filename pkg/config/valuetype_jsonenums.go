// Code generated by jsonenums -type=ValueType; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"
)

var (
	_ValueTypeNameToValue = map[string]ValueType{
		"ValueTypeString": ValueTypeString,
		"ValueTypeNumber": ValueTypeNumber,
	}

	_ValueTypeValueToName = map[ValueType]string{
		ValueTypeString: "ValueTypeString",
		ValueTypeNumber: "ValueTypeNumber",
	}
)

func init() {
	var v ValueType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ValueTypeNameToValue = map[string]ValueType{
			interface{}(ValueTypeString).(fmt.Stringer).String(): ValueTypeString,
			interface{}(ValueTypeNumber).(fmt.Stringer).String(): ValueTypeNumber,
		}
	}
}

// MarshalJSON is generated so ValueType satisfies json.Marshaler.
func (r ValueType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ValueTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ValueType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ValueType satisfies json.Unmarshaler.
func (r *ValueType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ValueType should be a string, got %s", data)
	}
	v, ok := _ValueTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ValueType %q", s)
	}
	*r = v
	return nil
}
